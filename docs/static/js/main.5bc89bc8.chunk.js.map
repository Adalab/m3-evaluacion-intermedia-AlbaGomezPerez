{"version":3,"sources":["PokemonInfo.js","components/PokemonList.js","App.js","serviceWorker.js","index.js"],"names":["PokemonInfo","id","name","types","evolution","url","PokemonList","className","this","props","map","character","src","React","Component","App","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAmFiBA,EAnFG,CACnB,CACEC,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,KACXC,IACD,kFAED,CACEJ,GAAI,EACJC,KAAM,UACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,YACXC,IACD,kFAED,CACEJ,GAAI,EACJC,KAAM,WACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,UACXC,IACD,kFAED,CACEJ,GAAI,EACJC,KAAM,aACNC,MAAO,CAAC,QACRC,UAAW,KACXC,IACD,kFAED,CACEJ,GAAI,EACJC,KAAM,aACNC,MAAO,CAAC,QACRC,UAAW,aACXC,IACD,kFAED,CACEJ,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SAAU,QAClBC,UAAW,aACXC,IACD,kFAED,CACEJ,GAAI,EACJC,KAAM,WACNC,MAAO,CAAC,SACRC,UAAW,KACXC,IACD,kFAED,CACEJ,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SACRC,UAAW,WACXC,IACD,kFAED,CACEJ,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SACRC,UAAW,YACXC,IACD,kFAED,CACEJ,GAAI,GACJC,KAAM,WACNC,MAAO,CAAC,OACRC,UAAW,KACXC,IACD,oFCvDeC,E,iLApBd,OACD,wBAAIC,UAAU,QACXC,KAAKC,MAAMT,YAAYU,KAAI,SAAAC,GAC7B,OACE,wBAAIJ,UAAU,iBACX,yBAAKA,UAAU,WAAf,IAA0B,yBAAKK,IAAKD,EAAUN,MAA9C,MACF,yBAAKE,UAAU,YAAf,IAA4BI,EAAUT,KAAtC,KACA,yBAAKK,UAAU,aAAf,IAA6BI,EAAUR,MAAvC,c,GAToBU,IAAMC,WCuBjBC,G,kBAnBd,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CACZhB,YAAcA,GAHE,E,sEAQlB,OACE,yBAAKO,UAAU,OAChB,kBAAC,EAAD,CAAaP,YAAaQ,KAAKQ,MAAMhB,mB,GAXtBc,cCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5bc89bc8.chunk.js","sourcesContent":["const PokemonInfo = [\n\t{\n\t  id: 1,\n\t  name: 'bulbasaur',\n\t  types: ['poison', 'grass'],\n\t  evolution: null,\n\t  url:\n\t\t'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png',\n\t},\n\t{\n\t  id: 2,\n\t  name: 'ivysaur',\n\t  types: ['poison', 'grass'],\n\t  evolution: 'bulbasaur',\n\t  url:\n\t\t'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png',\n\t},\n\t{\n\t  id: 3,\n\t  name: 'venusaur',\n\t  types: ['poison', 'grass'],\n\t  evolution: 'ivysaur',\n\t  url:\n\t\t'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png',\n\t},\n\t{\n\t  id: 4,\n\t  name: 'charmander',\n\t  types: ['fire'],\n\t  evolution: null,\n\t  url:\n\t\t'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png',\n\t},\n\t{\n\t  id: 5,\n\t  name: 'charmeleon',\n\t  types: ['fire'],\n\t  evolution: 'charmander',\n\t  url:\n\t\t'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png',\n\t},\n\t{\n\t  id: 6,\n\t  name: 'charizard',\n\t  types: ['flying', 'fire'],\n\t  evolution: 'charmeleon',\n\t  url:\n\t\t'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png',\n\t},\n\t{\n\t  id: 7,\n\t  name: 'squirtle',\n\t  types: ['water'],\n\t  evolution: null,\n\t  url:\n\t\t'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png',\n\t},\n\t{\n\t  id: 8,\n\t  name: 'wartortle',\n\t  types: ['water'],\n\t  evolution: 'squirtle',\n\t  url:\n\t\t'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png',\n\t},\n\t{\n\t  id: 9,\n\t  name: 'blastoise',\n\t  types: ['water'],\n\t  evolution: 'wartortle',\n\t  url:\n\t\t'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png',\n\t},\n\t{\n\t  id: 10,\n\t  name: 'caterpie',\n\t  types: ['bug'],\n\t  evolution: null,\n\t  url:\n\t\t'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png',\n\t},\n  ]; \n\n  export default PokemonInfo; \n ","import React, { Component } from 'react'; \n\nclass PokemonList extends React.Component {\n\trender() {\n\t  return (\n\t\t<ol className=\"Info\">\n\t\t  {this.props.PokemonInfo.map(character => {\n\t\t\treturn (\n\t\t\t  <li className=\"InfoCharacter\"> \n\t\t\t  \t  <div className=\"InfoImg\"> <img src={character.url}></img>  </div>\n\t\t\t\t  <div className=\"InfoName\"> {character.name} </div>\n\t\t\t\t  <div className=\"Infotypes\"> {character.types} </div>\n\t\t\t  </li> \n\t\t\t);\n\t\t  })}\n\t\t</ol>\t\n\t  );\n\t}\n\t}\n  \n//  PokemonList.propTypes = {\n//  \tPokemonInfo : PropTypes.array\n//  }; \n  \n  export default PokemonList;","import React, { Component } from 'react';\nimport PokemonInfo from './PokemonInfo'; \nimport PokemonList from './components/PokemonList'; \nimport './App.css';\n\nclass App extends Component {\n\tconstructor(props) {\n\t  super(props);\n\t  this.state = {\n\t\t  PokemonInfo : PokemonInfo \n\t  } \n\t}\n \n\trender() {\n\t\treturn (\n\t\t  <div className=\"app\">\n\t\t\t<PokemonList PokemonInfo={this.state.PokemonInfo} />\n\t\t  </div>\n\t\t);\n\t  }\n\t}\n\n\t\n\t\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}